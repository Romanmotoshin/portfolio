{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js","components/pages/SingleComicPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useMarvelService","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getComic","_transformComics","getAllComics","comics","title","description","pageCount","language","textObjects","urls","price","prices","thumbnail","path","extension","char","name","slice","homepage","wiki","items","AppBanner","className","avengers","avengersLogo","View","comic","to","SingleComicPage","comicId","useParams","setComic","useEffect","updateComic","then","onComicLoaded","errorMessage","spinner","content"],"mappings":"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","file":"static/js/5.6d89b5a4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useCallback} from \"react\";\r\n\r\nconst useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async ( url, method = \"GET\", body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback( () => setError(null), [])\r\n\r\n    return {loading, error, request, clearError}\r\n}\r\n\r\nexport default useHttp;","import useHttp from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, error, request, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=b589950ea7a5ad0b6cf227576cd2dbf0';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 20) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title || 'No title',\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the numbers of page',\r\n            language: comics.textObjects.language || 'en-ru',\r\n            url: comics.urls[0].url,\r\n            price: comics.prices[0].price,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {loading, error, getCharacter, getAllCharacters, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import { useParams, Link } from 'react-router-dom';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\nimport {useState, useEffect} from 'react';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './singleComicPage.scss';\r\nimport AppBanner from '../appBanner/AppBanner';\r\n\r\nconst SingleComicPage = () => {\r\n    const {comicId} = useParams();\r\n    const [comic, setComic] = useState(null);\r\n\r\n    const {loading, error, getComic, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n    }, [comicId])\r\n    \r\n    const updateComic = () => {\r\n        clearError();\r\n        getComic(comicId)\r\n            .then(onComicLoaded)\r\n    }\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({comic}) => {\r\n    const {title, description, thumbnail, language, pageCount, price} = comic;\r\n\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\"/>\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}$</div>\r\n            </div>\r\n            <Link to='/comics' className=\"single-comic__back\">Back to all</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleComicPage;"],"sourceRoot":""}