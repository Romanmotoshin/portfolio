{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","hooks/http.hook.js","services/MarvelService.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useMarvelService","_apiBase","_apiKey","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","getComic","_transformComics","getAllComics","comics","title","description","pageCount","language","textObjects","urls","price","prices","thumbnail","path","extension","char","name","slice","homepage","wiki","items","View","imgStyle","className","href","RandomChar","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","console","log","current","forEach","item","classList","remove","add","focus","arr","i","tabIndex","ref","el","onCharSelected","onKeyDown","e","key","renderItems","disabled","Skeleton","CharInfo","charId","skeleton","ErrorBoundary","state","errorInfo","this","setState","children","Component","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/3.bcfb69a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useCallback} from \"react\";\r\n\r\nconst useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async ( url, method = \"GET\", body = null, headers = {'Content-type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback( () => setError(null), [])\r\n\r\n    return {loading, error, request, clearError}\r\n}\r\n\r\nexport default useHttp;","import useHttp from \"../hooks/http.hook\";\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, error, request, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=b589950ea7a5ad0b6cf227576cd2dbf0';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = 20) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title || 'No title',\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the numbers of page',\r\n            language: comics.textObjects.language || 'en-ru',\r\n            url: comics.urls[0].url,\r\n            price: comics.prices[0].price,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    return {loading, error, getCharacter, getAllCharacters, clearError, getAllComics, getComic}\r\n}\r\n\r\nexport default useMarvelService;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n    \n    const [char, setChar] = useState({});\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={() => updateChar()} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport { PropTypes } from 'prop-types';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n        \n    \n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        console.log(itemRefs.current)\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyDown={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        \n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                onClick = {() => onRequest(offset)}\n                style = {{'display': charEnded ? 'none' : 'block'}}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired,\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import './charInfo.scss';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton'\n\nimport {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null)\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n    \n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({char}) => {\n\n    const {name, thumbnail, homepage, wiki, description, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    \n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics for this character'}\n                {comics.map((item, i) => {\n                    if (i > 9) return;\n                    return (\n                        <li key={i} className=\"char__comics-item\">\n                            {item.name}\n                        </li>\n                    )\n                })}\n            </ul>\n        </>\n    )\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nimport { useState } from \"react\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected = {onCharSelected}/>  \r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <CharInfo charId = {selectedChar}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}